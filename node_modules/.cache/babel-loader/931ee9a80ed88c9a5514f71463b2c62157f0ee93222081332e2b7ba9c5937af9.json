{"ast":null,"code":"var _jsxFileName = \"/Users/angeluzunov/Desktop/Coursor project 1/src/components/WalletCard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport './WalletCard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WalletCard({\n  account,\n  balance,\n  network\n}) {\n  _s();\n  const [recipient, setRecipient] = useState('');\n  const [amount, setAmount] = useState('');\n  const [nfts, setNfts] = useState([]);\n  useEffect(() => {\n    const fetchNFTs = async () => {\n      try {\n        if (account) {\n          // For development, let's return an empty array instead of making API calls\n          setNfts([]);\n\n          // Uncomment this when you have your API set up\n          /*\n          const response = await fetch(\n            `https://api.opensea.io/api/v1/assets?owner=${account.address}&limit=20`\n          );\n          const data = await response.json();\n          setNfts(data.assets || []);\n          */\n        }\n      } catch (error) {\n        console.error('Error fetching NFTs:', error);\n        setNfts([]);\n      }\n    };\n    fetchNFTs();\n  }, [account]);\n  const sendTransaction = async () => {\n    try {\n      const tx = await account.sendTransaction({\n        to: recipient,\n        value: ethers.utils.parseEther(amount)\n      });\n      await tx.wait();\n      alert('Transaction successful!');\n    } catch (error) {\n      alert('Transaction failed: ' + error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wallet-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"balance-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Balance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"balance\",\n        children: [balance, \" ETH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"network\",\n        children: network\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transfer-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Send ETH\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Recipient Address\",\n        value: recipient,\n        onChange: e => setRecipient(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Amount in ETH\",\n        value: amount,\n        onChange: e => setAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendTransaction,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nft-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"NFTs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nft-grid\",\n        children: nfts && nfts.length > 0 ? nfts.map(nft => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nft-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: nft.image_url,\n            alt: nft.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: nft.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 17\n          }, this)]\n        }, nft.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No NFTs found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(WalletCard, \"GE42cqOUnz9nHYoPSNoIs8/DdbE=\");\n_c = WalletCard;\nexport default WalletCard;\nvar _c;\n$RefreshReg$(_c, \"WalletCard\");","map":{"version":3,"names":["React","useState","useEffect","ethers","jsxDEV","_jsxDEV","WalletCard","account","balance","network","_s","recipient","setRecipient","amount","setAmount","nfts","setNfts","fetchNFTs","error","console","sendTransaction","tx","to","value","utils","parseEther","wait","alert","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","onClick","length","map","nft","src","image_url","alt","name","id","_c","$RefreshReg$"],"sources":["/Users/angeluzunov/Desktop/Coursor project 1/src/components/WalletCard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport './WalletCard.css';\n\nfunction WalletCard({ account, balance, network }) {\n  const [recipient, setRecipient] = useState('');\n  const [amount, setAmount] = useState('');\n  const [nfts, setNfts] = useState([]);\n\n  useEffect(() => {\n    const fetchNFTs = async () => {\n      try {\n        if (account) {\n          // For development, let's return an empty array instead of making API calls\n          setNfts([]);\n          \n          // Uncomment this when you have your API set up\n          /*\n          const response = await fetch(\n            `https://api.opensea.io/api/v1/assets?owner=${account.address}&limit=20`\n          );\n          const data = await response.json();\n          setNfts(data.assets || []);\n          */\n        }\n      } catch (error) {\n        console.error('Error fetching NFTs:', error);\n        setNfts([]);\n      }\n    };\n\n    fetchNFTs();\n  }, [account]);\n\n  const sendTransaction = async () => {\n    try {\n      const tx = await account.sendTransaction({\n        to: recipient,\n        value: ethers.utils.parseEther(amount)\n      });\n      await tx.wait();\n      alert('Transaction successful!');\n    } catch (error) {\n      alert('Transaction failed: ' + error.message);\n    }\n  };\n\n  return (\n    <div className=\"wallet-card\">\n      <div className=\"balance-section\">\n        <h2>Balance</h2>\n        <p className=\"balance\">{balance} ETH</p>\n        <p className=\"network\">{network}</p>\n      </div>\n\n      <div className=\"transfer-section\">\n        <h3>Send ETH</h3>\n        <input\n          type=\"text\"\n          placeholder=\"Recipient Address\"\n          value={recipient}\n          onChange={(e) => setRecipient(e.target.value)}\n        />\n        <input\n          type=\"number\"\n          placeholder=\"Amount in ETH\"\n          value={amount}\n          onChange={(e) => setAmount(e.target.value)}\n        />\n        <button onClick={sendTransaction}>Send</button>\n      </div>\n\n      <div className=\"nft-section\">\n        <h3>NFTs</h3>\n        <div className=\"nft-grid\">\n          {nfts && nfts.length > 0 ? (\n            nfts.map((nft) => (\n              <div key={nft.id} className=\"nft-item\">\n                <img src={nft.image_url} alt={nft.name} />\n                <p>{nft.name}</p>\n              </div>\n            ))\n          ) : (\n            <p>No NFTs found</p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default WalletCard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}