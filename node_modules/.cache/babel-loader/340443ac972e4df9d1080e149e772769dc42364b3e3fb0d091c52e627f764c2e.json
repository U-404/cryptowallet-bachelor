{"ast":null,"code":"var _jsxFileName = \"/Users/angeluzunov/Desktop/Coursor project 1/src/components/ChatGPT.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ChatGPT.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatGPT() {\n  _s();\n  const [question, setQuestion] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!question.trim()) return;\n    if (!API_KEY) {\n      setMessages(prev => [...prev, {\n        type: 'error',\n        content: 'Error: API key is not configured properly'\n      }]);\n      return;\n    }\n\n    // Add user message immediately\n    setMessages(prev => [...prev, {\n      type: 'user',\n      content: question\n    }]);\n    setQuestion(''); // Clear input\n    setIsLoading(true);\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${API_KEY}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-4-turbo-preview\",\n          messages: [{\n            role: \"user\",\n            content: question\n          }],\n          max_tokens: 1000,\n          temperature: 0.7\n        })\n      });\n      if (!response.ok) {\n        var _errorData$error;\n        const errorData = await response.json();\n        throw new Error(((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || 'API request failed');\n      }\n      const data = await response.json();\n      if (data.choices && data.choices[0]) {\n        setMessages(prev => [...prev, {\n          type: 'assistant',\n          content: data.choices[0].message.content\n        }]);\n      } else {\n        throw new Error('No response from ChatGPT');\n      }\n    } catch (error) {\n      console.error('Error details:', error);\n      setMessages(prev => [...prev, {\n        type: 'error',\n        content: `Error: ${error.message}`\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatgpt-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.type}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message assistant\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content typing\",\n          children: \"Thinking...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"question-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: question,\n        onChange: e => setQuestion(e.target.value),\n        placeholder: \"Type your message here...\",\n        disabled: isLoading,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isLoading,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatGPT, \"EtysVIiXgfq+DFz8qe4Nynru6Qg=\");\n_c = ChatGPT;\nexport default ChatGPT;\nvar _c;\n$RefreshReg$(_c, \"ChatGPT\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ChatGPT","_s","question","setQuestion","messages","setMessages","isLoading","setIsLoading","API_KEY","process","env","REACT_APP_OPENAI_API_KEY","handleSubmit","e","preventDefault","trim","prev","type","content","response","fetch","method","headers","body","JSON","stringify","model","role","max_tokens","temperature","ok","_errorData$error","errorData","json","Error","error","message","data","choices","console","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","target","placeholder","disabled","required","_c","$RefreshReg$"],"sources":["/Users/angeluzunov/Desktop/Coursor project 1/src/components/ChatGPT.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './ChatGPT.css';\n\nfunction ChatGPT() {\n  const [question, setQuestion] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!question.trim()) return;\n\n    if (!API_KEY) {\n      setMessages(prev => [...prev, { type: 'error', content: 'Error: API key is not configured properly' }]);\n      return;\n    }\n\n    // Add user message immediately\n    setMessages(prev => [...prev, { type: 'user', content: question }]);\n    setQuestion(''); // Clear input\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${API_KEY}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-4-turbo-preview\",\n          messages: [\n            {\n              role: \"user\",\n              content: question\n            }\n          ],\n          max_tokens: 1000,\n          temperature: 0.7\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error?.message || 'API request failed');\n      }\n\n      const data = await response.json();\n      if (data.choices && data.choices[0]) {\n        setMessages(prev => [...prev, { type: 'assistant', content: data.choices[0].message.content }]);\n      } else {\n        throw new Error('No response from ChatGPT');\n      }\n    } catch (error) {\n      console.error('Error details:', error);\n      setMessages(prev => [...prev, { type: 'error', content: `Error: ${error.message}` }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"chatgpt-container\">\n      <div className=\"chat-messages\">\n        {messages.map((message, index) => (\n          <div key={index} className={`message ${message.type}`}>\n            <div className=\"message-content\">\n              {message.content}\n            </div>\n          </div>\n        ))}\n        {isLoading && (\n          <div className=\"message assistant\">\n            <div className=\"message-content typing\">\n              Thinking...\n            </div>\n          </div>\n        )}\n      </div>\n      <form onSubmit={handleSubmit} className=\"question-form\">\n        <textarea\n          value={question}\n          onChange={(e) => setQuestion(e.target.value)}\n          placeholder=\"Type your message here...\"\n          disabled={isLoading}\n          required\n        />\n        <button type=\"submit\" disabled={isLoading}>\n          Send\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default ChatGPT; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}