{"ast":null,"code":"var _jsxFileName = \"/Users/angeluzunov/Desktop/Coursor project 1/src/components/ChatGPT.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ChatGPT.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatGPT() {\n  _s();\n  const [question, setQuestion] = useState('');\n  const [answer, setAnswer] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!question.trim()) return;\n    if (!API_KEY) {\n      setAnswer('Error: API key is not configured properly');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${API_KEY}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-4-turbo-preview\",\n          messages: [{\n            role: \"user\",\n            content: question\n          }],\n          max_tokens: 1000,\n          temperature: 0.7\n        })\n      });\n      if (!response.ok) {\n        var _errorData$error;\n        const errorData = await response.json();\n        console.error('API Error:', errorData);\n        throw new Error(((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || 'API request failed');\n      }\n      const data = await response.json();\n      if (data.choices && data.choices[0]) {\n        setAnswer(data.choices[0].message.content);\n      } else {\n        throw new Error('No response from ChatGPT');\n      }\n    } catch (error) {\n      console.error('Error details:', error);\n      setAnswer(`Error: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatgpt-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"question-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: question,\n        onChange: e => setQuestion(e.target.value),\n        placeholder: \"Type your question here...\",\n        disabled: isLoading,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isLoading,\n        children: isLoading ? 'Thinking...' : 'Ask Question'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), answer && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Answer:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: answer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatGPT, \"Uj8GLkpVaJ/VfKebe/UaehU0s9I=\");\n_c = ChatGPT;\nexport default ChatGPT;\nvar _c;\n$RefreshReg$(_c, \"ChatGPT\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ChatGPT","_s","question","setQuestion","answer","setAnswer","isLoading","setIsLoading","API_KEY","process","env","REACT_APP_OPENAI_API_KEY","handleSubmit","e","preventDefault","trim","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","max_tokens","temperature","ok","_errorData$error","errorData","json","console","error","Error","message","data","choices","className","children","onSubmit","value","onChange","target","placeholder","disabled","required","fileName","_jsxFileName","lineNumber","columnNumber","type","_c","$RefreshReg$"],"sources":["/Users/angeluzunov/Desktop/Coursor project 1/src/components/ChatGPT.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './ChatGPT.css';\n\nfunction ChatGPT() {\n  const [question, setQuestion] = useState('');\n  const [answer, setAnswer] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!question.trim()) return;\n\n    if (!API_KEY) {\n      setAnswer('Error: API key is not configured properly');\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${API_KEY}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-4-turbo-preview\",\n          messages: [\n            {\n              role: \"user\",\n              content: question\n            }\n          ],\n          max_tokens: 1000,\n          temperature: 0.7\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error('API Error:', errorData);\n        throw new Error(errorData.error?.message || 'API request failed');\n      }\n\n      const data = await response.json();\n      if (data.choices && data.choices[0]) {\n        setAnswer(data.choices[0].message.content);\n      } else {\n        throw new Error('No response from ChatGPT');\n      }\n    } catch (error) {\n      console.error('Error details:', error);\n      setAnswer(`Error: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"chatgpt-container\">\n      <form onSubmit={handleSubmit} className=\"question-form\">\n        <textarea\n          value={question}\n          onChange={(e) => setQuestion(e.target.value)}\n          placeholder=\"Type your question here...\"\n          disabled={isLoading}\n          required\n        />\n        <button type=\"submit\" disabled={isLoading}>\n          {isLoading ? 'Thinking...' : 'Ask Question'}\n        </button>\n      </form>\n      {answer && (\n        <div className=\"answer-container\">\n          <h3>Answer:</h3>\n          <p>{answer}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ChatGPT; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}