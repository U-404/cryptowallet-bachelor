{"ast":null,"code":"var _jsxFileName = \"/Users/angeluzunov/Desktop/Coursor project 1/src/components/WalletCard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport './WalletCard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WalletCard({\n  account,\n  balance,\n  network\n}) {\n  _s();\n  const [recipient, setRecipient] = useState('');\n  const [amount, setAmount] = useState('');\n  const [nfts, setNfts] = useState([]);\n  const [displayBalance, setDisplayBalance] = useState('0.00000');\n  const updateBalance = async () => {\n    try {\n      if (!account) return;\n\n      // Create a new provider based on the current network\n      const provider = new ethers.providers.JsonRpcProvider(network === 'mainnet' ? process.env.REACT_APP_MAINNET_RPC : process.env.REACT_APP_SEPOLIA_RPC, network === 'mainnet' ? 'mainnet' : 'sepolia');\n\n      // Create a new connected wallet instance with the current network\n      const currentWallet = account.connect(provider);\n      const currentBalance = await provider.getBalance(currentWallet.address);\n      setDisplayBalance(Number(ethers.utils.formatEther(currentBalance)).toFixed(5));\n    } catch (error) {\n      console.error('Error fetching balance:', error);\n      setDisplayBalance('0.00000');\n    }\n  };\n  useEffect(() => {\n    updateBalance();\n\n    // Set up an interval to update the balance every 30 seconds\n    const interval = setInterval(updateBalance, 30000);\n    return () => clearInterval(interval);\n  }, [account, network]); // Add network as a dependency\n\n  useEffect(() => {\n    const fetchNFTs = async () => {\n      try {\n        if (account) {\n          // For development, let's return an empty array instead of making API calls\n          setNfts([]);\n\n          // Uncomment this when you have your API set up\n          /*\n          const response = await fetch(\n            `https://api.opensea.io/api/v1/assets?owner=${account.address}&limit=20`\n          );\n          const data = await response.json();\n          setNfts(data.assets || []);\n          */\n        }\n      } catch (error) {\n        console.error('Error fetching NFTs:', error);\n        setNfts([]);\n      }\n    };\n    fetchNFTs();\n  }, [account, network]); // Add network as a dependency\n\n  const sendTransaction = async () => {\n    try {\n      // Create a new provider based on the current network\n      const provider = new ethers.providers.JsonRpcProvider(network === 'mainnet' ? process.env.REACT_APP_MAINNET_RPC : process.env.REACT_APP_SEPOLIA_RPC, network === 'mainnet' ? 'mainnet' : 'sepolia');\n\n      // Create a new connected wallet instance with the current network\n      const currentWallet = account.connect(provider);\n      const tx = await currentWallet.sendTransaction({\n        to: recipient,\n        value: ethers.utils.parseEther(amount)\n      });\n      await tx.wait();\n\n      // Update balance after transaction\n      await updateBalance();\n      alert('Transaction successful!');\n      setRecipient('');\n      setAmount('');\n    } catch (error) {\n      alert('Transaction failed: ' + error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wallet-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"balance-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Balance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"balance\",\n        children: [displayBalance, \" ETH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"network\",\n        children: network === 'mainnet' ? 'Ethereum Mainnet' : 'Sepolia Testnet'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transfer-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Send ETH\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Recipient Address\",\n        value: recipient,\n        onChange: e => setRecipient(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Amount in ETH\",\n        value: amount,\n        onChange: e => setAmount(e.target.value),\n        step: \"0.00001\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendTransaction,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nft-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"NFTs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nft-grid\",\n        children: nfts && nfts.length > 0 ? nfts.map(nft => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nft-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: nft.image_url,\n            alt: nft.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: nft.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 17\n          }, this)]\n        }, nft.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No NFTs found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(WalletCard, \"m2rfE2OalKG3Oq61u8Z2UVI7bNE=\");\n_c = WalletCard;\nexport default WalletCard;\nvar _c;\n$RefreshReg$(_c, \"WalletCard\");","map":{"version":3,"names":["React","useState","useEffect","ethers","jsxDEV","_jsxDEV","WalletCard","account","balance","network","_s","recipient","setRecipient","amount","setAmount","nfts","setNfts","displayBalance","setDisplayBalance","updateBalance","provider","providers","JsonRpcProvider","process","env","REACT_APP_MAINNET_RPC","REACT_APP_SEPOLIA_RPC","currentWallet","connect","currentBalance","getBalance","address","Number","utils","formatEther","toFixed","error","console","interval","setInterval","clearInterval","fetchNFTs","sendTransaction","tx","to","value","parseEther","wait","alert","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","step","onClick","length","map","nft","src","image_url","alt","name","id","_c","$RefreshReg$"],"sources":["/Users/angeluzunov/Desktop/Coursor project 1/src/components/WalletCard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport './WalletCard.css';\n\nfunction WalletCard({ account, balance, network }) {\n  const [recipient, setRecipient] = useState('');\n  const [amount, setAmount] = useState('');\n  const [nfts, setNfts] = useState([]);\n  const [displayBalance, setDisplayBalance] = useState('0.00000');\n\n  const updateBalance = async () => {\n    try {\n      if (!account) return;\n      \n      // Create a new provider based on the current network\n      const provider = new ethers.providers.JsonRpcProvider(\n        network === 'mainnet'\n          ? process.env.REACT_APP_MAINNET_RPC\n          : process.env.REACT_APP_SEPOLIA_RPC,\n        network === 'mainnet' ? 'mainnet' : 'sepolia'\n      );\n\n      // Create a new connected wallet instance with the current network\n      const currentWallet = account.connect(provider);\n      \n      const currentBalance = await provider.getBalance(currentWallet.address);\n      setDisplayBalance(Number(ethers.utils.formatEther(currentBalance)).toFixed(5));\n    } catch (error) {\n      console.error('Error fetching balance:', error);\n      setDisplayBalance('0.00000');\n    }\n  };\n\n  useEffect(() => {\n    updateBalance();\n    \n    // Set up an interval to update the balance every 30 seconds\n    const interval = setInterval(updateBalance, 30000);\n    return () => clearInterval(interval);\n  }, [account, network]); // Add network as a dependency\n\n  useEffect(() => {\n    const fetchNFTs = async () => {\n      try {\n        if (account) {\n          // For development, let's return an empty array instead of making API calls\n          setNfts([]);\n          \n          // Uncomment this when you have your API set up\n          /*\n          const response = await fetch(\n            `https://api.opensea.io/api/v1/assets?owner=${account.address}&limit=20`\n          );\n          const data = await response.json();\n          setNfts(data.assets || []);\n          */\n        }\n      } catch (error) {\n        console.error('Error fetching NFTs:', error);\n        setNfts([]);\n      }\n    };\n\n    fetchNFTs();\n  }, [account, network]); // Add network as a dependency\n\n  const sendTransaction = async () => {\n    try {\n      // Create a new provider based on the current network\n      const provider = new ethers.providers.JsonRpcProvider(\n        network === 'mainnet'\n          ? process.env.REACT_APP_MAINNET_RPC\n          : process.env.REACT_APP_SEPOLIA_RPC,\n        network === 'mainnet' ? 'mainnet' : 'sepolia'\n      );\n\n      // Create a new connected wallet instance with the current network\n      const currentWallet = account.connect(provider);\n\n      const tx = await currentWallet.sendTransaction({\n        to: recipient,\n        value: ethers.utils.parseEther(amount)\n      });\n      await tx.wait();\n      \n      // Update balance after transaction\n      await updateBalance();\n      alert('Transaction successful!');\n      setRecipient('');\n      setAmount('');\n    } catch (error) {\n      alert('Transaction failed: ' + error.message);\n    }\n  };\n\n  return (\n    <div className=\"wallet-card\">\n      <div className=\"balance-section\">\n        <h2>Balance</h2>\n        <p className=\"balance\">{displayBalance} ETH</p>\n        <p className=\"network\">{network === 'mainnet' ? 'Ethereum Mainnet' : 'Sepolia Testnet'}</p>\n      </div>\n\n      <div className=\"transfer-section\">\n        <h3>Send ETH</h3>\n        <input\n          type=\"text\"\n          placeholder=\"Recipient Address\"\n          value={recipient}\n          onChange={(e) => setRecipient(e.target.value)}\n        />\n        <input\n          type=\"number\"\n          placeholder=\"Amount in ETH\"\n          value={amount}\n          onChange={(e) => setAmount(e.target.value)}\n          step=\"0.00001\"\n        />\n        <button onClick={sendTransaction}>Send</button>\n      </div>\n\n      <div className=\"nft-section\">\n        <h3>NFTs</h3>\n        <div className=\"nft-grid\">\n          {nfts && nfts.length > 0 ? (\n            nfts.map((nft) => (\n              <div key={nft.id} className=\"nft-item\">\n                <img src={nft.image_url} alt={nft.name} />\n                <p>{nft.name}</p>\n              </div>\n            ))\n          ) : (\n            <p>No NFTs found</p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default WalletCard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}