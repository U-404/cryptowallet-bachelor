{"ast":null,"code":"var _jsxFileName = \"/Users/angeluzunov/Desktop/Coursor project 1/src/components/DAOInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport './DAOInterface.css';\n\n// Import your DAO ABI\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst daoABI = [\n  // Add your DAO contract ABI here\n];\nfunction DAOInterface({\n  account,\n  network\n}) {\n  _s();\n  const [contract, setContract] = useState(null);\n  const [proposals, setProposals] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const initializeContract = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Get the appropriate contract address based on network\n        const contractAddress = network === 'mainnet' ? process.env.REACT_APP_DAO_CONTRACT_MAINNET : process.env.REACT_APP_DAO_CONTRACT_SEPOLIA;\n\n        // Validate contract address\n        if (!contractAddress) {\n          throw new Error(`No DAO contract address configured for ${network} network`);\n        }\n\n        // Create contract instance\n        const daoContract = new ethers.Contract(contractAddress, daoABI, account.provider);\n        setContract(daoContract);\n        await fetchProposals(daoContract);\n      } catch (err) {\n        console.error('Error initializing DAO contract:', err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (account) {\n      initializeContract();\n    }\n  }, [account, network]);\n  const fetchProposals = async daoContract => {\n    try {\n      // Add your logic to fetch proposals\n      // const proposalCount = await daoContract.getProposalCount();\n      // ... fetch and process proposals\n    } catch (err) {\n      console.error('Error fetching proposals:', err);\n      setError(err.message);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dao-loading\",\n      children: \"Loading DAO interface...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dao-error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Error Loading DAO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please make sure you're connected to the correct network and try again.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dao-interface\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"DAO Governance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"proposals-list\",\n      children: proposals.map(proposal => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"proposal-item\"\n      }, proposal.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(DAOInterface, \"GNtu3hbxufLDJejJkz2QCWo2AAM=\");\n_c = DAOInterface;\nexport default DAOInterface;\nvar _c;\n$RefreshReg$(_c, \"DAOInterface\");","map":{"version":3,"names":["React","useState","useEffect","ethers","jsxDEV","_jsxDEV","daoABI","DAOInterface","account","network","_s","contract","setContract","proposals","setProposals","loading","setLoading","error","setError","initializeContract","contractAddress","process","env","REACT_APP_DAO_CONTRACT_MAINNET","REACT_APP_DAO_CONTRACT_SEPOLIA","Error","daoContract","Contract","provider","fetchProposals","err","console","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","proposal","id","_c","$RefreshReg$"],"sources":["/Users/angeluzunov/Desktop/Coursor project 1/src/components/DAOInterface.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport './DAOInterface.css';\n\n// Import your DAO ABI\nconst daoABI = [\n  // Add your DAO contract ABI here\n];\n\nfunction DAOInterface({ account, network }) {\n  const [contract, setContract] = useState(null);\n  const [proposals, setProposals] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const initializeContract = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Get the appropriate contract address based on network\n        const contractAddress = network === 'mainnet'\n          ? process.env.REACT_APP_DAO_CONTRACT_MAINNET\n          : process.env.REACT_APP_DAO_CONTRACT_SEPOLIA;\n\n        // Validate contract address\n        if (!contractAddress) {\n          throw new Error(`No DAO contract address configured for ${network} network`);\n        }\n\n        // Create contract instance\n        const daoContract = new ethers.Contract(\n          contractAddress,\n          daoABI,\n          account.provider\n        );\n\n        setContract(daoContract);\n        await fetchProposals(daoContract);\n      } catch (err) {\n        console.error('Error initializing DAO contract:', err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (account) {\n      initializeContract();\n    }\n  }, [account, network]);\n\n  const fetchProposals = async (daoContract) => {\n    try {\n      // Add your logic to fetch proposals\n      // const proposalCount = await daoContract.getProposalCount();\n      // ... fetch and process proposals\n    } catch (err) {\n      console.error('Error fetching proposals:', err);\n      setError(err.message);\n    }\n  };\n\n  if (loading) {\n    return <div className=\"dao-loading\">Loading DAO interface...</div>;\n  }\n\n  if (error) {\n    return (\n      <div className=\"dao-error\">\n        <h2>Error Loading DAO</h2>\n        <p>{error}</p>\n        <p>Please make sure you're connected to the correct network and try again.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"dao-interface\">\n      <h2>DAO Governance</h2>\n      {/* Add your DAO interface components here */}\n      <div className=\"proposals-list\">\n        {proposals.map((proposal) => (\n          <div key={proposal.id} className=\"proposal-item\">\n            {/* Render proposal details */}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default DAOInterface; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}