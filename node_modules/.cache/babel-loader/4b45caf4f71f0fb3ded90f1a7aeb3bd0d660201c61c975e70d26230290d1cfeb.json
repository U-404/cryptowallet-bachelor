{"ast":null,"code":"var _jsxFileName = \"/Users/angeluzunov/Desktop/Coursor project 1/src/components/WalletCard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport './WalletCard.css';\nimport LoadingSpinner from './LoadingSpinner';\n\n// Minimal ERC20 ABI for token balance and decimals\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ERC20_ABI = [\"function balanceOf(address) view returns (uint256)\", \"function decimals() view returns (uint8)\", \"function symbol() view returns (string)\"];\nfunction WalletCard({\n  account,\n  balance,\n  network\n}) {\n  _s();\n  const [recipient, setRecipient] = useState('');\n  const [amount, setAmount] = useState('');\n  const [nfts, setNfts] = useState([]);\n  const [displayBalance, setDisplayBalance] = useState('0.00000');\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [tokens, setTokens] = useState([]);\n  const [isLoadingTokens, setIsLoadingTokens] = useState(false);\n  const updateBalance = async () => {\n    try {\n      if (!account) return;\n      setIsUpdating(true);\n      // Create a new provider based on the current network\n      const provider = new ethers.providers.JsonRpcProvider(network === 'mainnet' ? process.env.REACT_APP_MAINNET_RPC : process.env.REACT_APP_SEPOLIA_RPC, network === 'mainnet' ? 'mainnet' : 'sepolia');\n\n      // Create a new connected wallet instance with the current network\n      const currentWallet = account.connect(provider);\n      const currentBalance = await provider.getBalance(currentWallet.address);\n      setDisplayBalance(Number(ethers.utils.formatEther(currentBalance)).toFixed(5));\n    } catch (error) {\n      console.error('Error fetching balance:', error);\n      setDisplayBalance('0.00000');\n    } finally {\n      setIsUpdating(false);\n    }\n  };\n  useEffect(() => {\n    updateBalance();\n\n    // Set up an interval to update the balance every 30 seconds\n    const interval = setInterval(updateBalance, 30000);\n    return () => clearInterval(interval);\n  }, [account, network]); // Add network as a dependency\n\n  useEffect(() => {\n    const fetchNFTs = async () => {\n      try {\n        if (account) {\n          setNfts([]);\n        }\n      } catch (error) {\n        console.error('Error fetching NFTs:', error);\n        setNfts([]);\n      }\n    };\n    fetchNFTs();\n  }, [account, network]); // Add network as a dependency\n\n  useEffect(() => {\n    const fetchTokens = async () => {\n      if (!account) return;\n      setIsLoadingTokens(true);\n      try {\n        const apiKey = process.env.REACT_APP_ETHERSCAN_API_KEY;\n        const baseUrl = network === 'mainnet' ? 'https://api.etherscan.io/api' : 'https://api-sepolia.etherscan.io/api';\n\n        // Use tokenbalance endpoint for better token detection\n        const response = await fetch(`${baseUrl}?module=account&action=tokentx&address=${account.address}&apikey=${apiKey}`);\n        const data = await response.json();\n        if (data.status === '1' && data.result) {\n          // Create a unique set of token contracts\n          const uniqueTokens = [...new Set(data.result.map(tx => tx.contractAddress))];\n\n          // Get token details and balances\n          const tokenDetails = await Promise.all(uniqueTokens.map(async tokenAddress => {\n            try {\n              const tokenContract = new ethers.Contract(tokenAddress, ERC20_ABI, account.provider);\n              const balance = await tokenContract.balanceOf(account.address);\n              const decimals = await tokenContract.decimals();\n              const symbol = await tokenContract.symbol();\n              const formattedBalance = ethers.utils.formatUnits(balance, decimals);\n\n              // Only return tokens with non-zero balance\n              if (Number(formattedBalance) > 0) {\n                return {\n                  address: tokenAddress,\n                  symbol,\n                  balance: Number(formattedBalance).toFixed(4),\n                  name: symbol // Use symbol as name if name is not available\n                };\n              }\n              return null;\n            } catch (error) {\n              console.error(`Error fetching token details for ${tokenAddress}:`, error);\n              return null;\n            }\n          }));\n          setTokens(tokenDetails.filter(token => token !== null));\n        }\n      } catch (error) {\n        console.error('Error fetching tokens:', error);\n      } finally {\n        setIsLoadingTokens(false);\n      }\n    };\n    fetchTokens();\n  }, [account, network]);\n  const sendTransaction = async () => {\n    try {\n      // Create a new provider based on the current network\n      const provider = new ethers.providers.JsonRpcProvider(network === 'mainnet' ? process.env.REACT_APP_MAINNET_RPC : process.env.REACT_APP_SEPOLIA_RPC, network === 'mainnet' ? 'mainnet' : 'sepolia');\n\n      // Create a new connected wallet instance with the current network\n      const currentWallet = account.connect(provider);\n      const tx = await currentWallet.sendTransaction({\n        to: recipient,\n        value: ethers.utils.parseEther(amount)\n      });\n      await tx.wait();\n\n      // Update balance after transaction\n      await updateBalance();\n      alert('Transaction successful!');\n      setRecipient('');\n      setAmount('');\n    } catch (error) {\n      alert('Transaction failed: ' + error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wallet-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"balance-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Balance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"balance-display\",\n        children: isUpdating ? /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"balance\",\n          children: [displayBalance, \" ETH\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"network\",\n        children: network === 'mainnet' ? 'Ethereum Mainnet' : 'Sepolia Testnet'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tokens-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Tokens\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), isLoadingTokens ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tokens-loading\",\n        children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this) : tokens.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tokens-list\",\n        children: tokens.map(token => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"token-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"token-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"token-symbol\",\n              children: token.symbol\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"token-name\",\n              children: token.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"token-balance\",\n            children: token.balance\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 17\n          }, this)]\n        }, token.address, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-tokens\",\n        children: \"No tokens found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transfer-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Send ETH\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Recipient Address\",\n        value: recipient,\n        onChange: e => setRecipient(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Amount in ETH\",\n        value: amount,\n        onChange: e => setAmount(e.target.value),\n        step: \"0.00001\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendTransaction,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nft-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"NFTs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nft-grid\",\n        children: nfts && nfts.length > 0 ? nfts.map(nft => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nft-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: nft.image_url,\n            alt: nft.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: nft.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 17\n          }, this)]\n        }, nft.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"no-nfts\",\n          children: \"No NFTs found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n}\n_s(WalletCard, \"K57ORwhfOnb2e1AIv9AYAfEoCxM=\");\n_c = WalletCard;\nexport default WalletCard;\nvar _c;\n$RefreshReg$(_c, \"WalletCard\");","map":{"version":3,"names":["React","useState","useEffect","ethers","LoadingSpinner","jsxDEV","_jsxDEV","ERC20_ABI","WalletCard","account","balance","network","_s","recipient","setRecipient","amount","setAmount","nfts","setNfts","displayBalance","setDisplayBalance","isUpdating","setIsUpdating","tokens","setTokens","isLoadingTokens","setIsLoadingTokens","updateBalance","provider","providers","JsonRpcProvider","process","env","REACT_APP_MAINNET_RPC","REACT_APP_SEPOLIA_RPC","currentWallet","connect","currentBalance","getBalance","address","Number","utils","formatEther","toFixed","error","console","interval","setInterval","clearInterval","fetchNFTs","fetchTokens","apiKey","REACT_APP_ETHERSCAN_API_KEY","baseUrl","response","fetch","data","json","status","result","uniqueTokens","Set","map","tx","contractAddress","tokenDetails","Promise","all","tokenAddress","tokenContract","Contract","balanceOf","decimals","symbol","formattedBalance","formatUnits","name","filter","token","sendTransaction","to","value","parseEther","wait","alert","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","type","placeholder","onChange","e","target","step","onClick","nft","src","image_url","alt","id","_c","$RefreshReg$"],"sources":["/Users/angeluzunov/Desktop/Coursor project 1/src/components/WalletCard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport './WalletCard.css';\nimport LoadingSpinner from './LoadingSpinner';\n\n// Minimal ERC20 ABI for token balance and decimals\nconst ERC20_ABI = [\n  \"function balanceOf(address) view returns (uint256)\",\n  \"function decimals() view returns (uint8)\",\n  \"function symbol() view returns (string)\"\n];\n\nfunction WalletCard({ account, balance, network }) {\n  const [recipient, setRecipient] = useState('');\n  const [amount, setAmount] = useState('');\n  const [nfts, setNfts] = useState([]);\n  const [displayBalance, setDisplayBalance] = useState('0.00000');\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [tokens, setTokens] = useState([]);\n  const [isLoadingTokens, setIsLoadingTokens] = useState(false);\n\n  const updateBalance = async () => {\n    try {\n      if (!account) return;\n      \n      setIsUpdating(true);\n      // Create a new provider based on the current network\n      const provider = new ethers.providers.JsonRpcProvider(\n        network === 'mainnet'\n          ? process.env.REACT_APP_MAINNET_RPC\n          : process.env.REACT_APP_SEPOLIA_RPC,\n        network === 'mainnet' ? 'mainnet' : 'sepolia'\n      );\n\n      // Create a new connected wallet instance with the current network\n      const currentWallet = account.connect(provider);\n      \n      const currentBalance = await provider.getBalance(currentWallet.address);\n      setDisplayBalance(Number(ethers.utils.formatEther(currentBalance)).toFixed(5));\n    } catch (error) {\n      console.error('Error fetching balance:', error);\n      setDisplayBalance('0.00000');\n    } finally {\n      setIsUpdating(false);\n    }\n  };\n\n  useEffect(() => {\n    updateBalance();\n    \n    // Set up an interval to update the balance every 30 seconds\n    const interval = setInterval(updateBalance, 30000);\n    return () => clearInterval(interval);\n  }, [account, network]); // Add network as a dependency\n\n  useEffect(() => {\n    const fetchNFTs = async () => {\n      try {\n        if (account) {\n          setNfts([]);\n        }\n      } catch (error) {\n        console.error('Error fetching NFTs:', error);\n        setNfts([]);\n      }\n    };\n\n    fetchNFTs();\n  }, [account, network]); // Add network as a dependency\n\n  useEffect(() => {\n    const fetchTokens = async () => {\n      if (!account) return;\n      \n      setIsLoadingTokens(true);\n      try {\n        const apiKey = process.env.REACT_APP_ETHERSCAN_API_KEY;\n        const baseUrl = network === 'mainnet' \n          ? 'https://api.etherscan.io/api'\n          : 'https://api-sepolia.etherscan.io/api';\n\n        // Use tokenbalance endpoint for better token detection\n        const response = await fetch(\n          `${baseUrl}?module=account&action=tokentx&address=${account.address}&apikey=${apiKey}`\n        );\n        const data = await response.json();\n\n        if (data.status === '1' && data.result) {\n          // Create a unique set of token contracts\n          const uniqueTokens = [...new Set(data.result.map(tx => tx.contractAddress))];\n          \n          // Get token details and balances\n          const tokenDetails = await Promise.all(\n            uniqueTokens.map(async (tokenAddress) => {\n              try {\n                const tokenContract = new ethers.Contract(\n                  tokenAddress,\n                  ERC20_ABI,\n                  account.provider\n                );\n                \n                const balance = await tokenContract.balanceOf(account.address);\n                const decimals = await tokenContract.decimals();\n                const symbol = await tokenContract.symbol();\n                const formattedBalance = ethers.utils.formatUnits(balance, decimals);\n                \n                // Only return tokens with non-zero balance\n                if (Number(formattedBalance) > 0) {\n                  return {\n                    address: tokenAddress,\n                    symbol,\n                    balance: Number(formattedBalance).toFixed(4),\n                    name: symbol // Use symbol as name if name is not available\n                  };\n                }\n                return null;\n              } catch (error) {\n                console.error(`Error fetching token details for ${tokenAddress}:`, error);\n                return null;\n              }\n            })\n          );\n\n          setTokens(tokenDetails.filter(token => token !== null));\n        }\n      } catch (error) {\n        console.error('Error fetching tokens:', error);\n      } finally {\n        setIsLoadingTokens(false);\n      }\n    };\n\n    fetchTokens();\n  }, [account, network]);\n\n  const sendTransaction = async () => {\n    try {\n      // Create a new provider based on the current network\n      const provider = new ethers.providers.JsonRpcProvider(\n        network === 'mainnet'\n          ? process.env.REACT_APP_MAINNET_RPC\n          : process.env.REACT_APP_SEPOLIA_RPC,\n        network === 'mainnet' ? 'mainnet' : 'sepolia'\n      );\n\n      // Create a new connected wallet instance with the current network\n      const currentWallet = account.connect(provider);\n\n      const tx = await currentWallet.sendTransaction({\n        to: recipient,\n        value: ethers.utils.parseEther(amount)\n      });\n      await tx.wait();\n      \n      // Update balance after transaction\n      await updateBalance();\n      alert('Transaction successful!');\n      setRecipient('');\n      setAmount('');\n    } catch (error) {\n      alert('Transaction failed: ' + error.message);\n    }\n  };\n\n  return (\n    <div className=\"wallet-card\">\n      <div className=\"balance-section\">\n        <h2>Balance</h2>\n        <div className=\"balance-display\">\n          {isUpdating ? (\n            <LoadingSpinner />\n          ) : (\n            <p className=\"balance\">{displayBalance} ETH</p>\n          )}\n        </div>\n        <p className=\"network\">{network === 'mainnet' ? 'Ethereum Mainnet' : 'Sepolia Testnet'}</p>\n      </div>\n\n      <div className=\"tokens-section\">\n        <h3>Tokens</h3>\n        {isLoadingTokens ? (\n          <div className=\"tokens-loading\">\n            <LoadingSpinner />\n          </div>\n        ) : tokens.length > 0 ? (\n          <div className=\"tokens-list\">\n            {tokens.map((token) => (\n              <div key={token.address} className=\"token-item\">\n                <div className=\"token-info\">\n                  <span className=\"token-symbol\">{token.symbol}</span>\n                  <span className=\"token-name\">{token.name}</span>\n                </div>\n                <span className=\"token-balance\">{token.balance}</span>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <p className=\"no-tokens\">No tokens found</p>\n        )}\n      </div>\n\n      <div className=\"transfer-section\">\n        <h3>Send ETH</h3>\n        <input\n          type=\"text\"\n          placeholder=\"Recipient Address\"\n          value={recipient}\n          onChange={(e) => setRecipient(e.target.value)}\n        />\n        <input\n          type=\"number\"\n          placeholder=\"Amount in ETH\"\n          value={amount}\n          onChange={(e) => setAmount(e.target.value)}\n          step=\"0.00001\"\n        />\n        <button onClick={sendTransaction}>Send</button>\n      </div>\n\n      <div className=\"nft-section\">\n        <h3>NFTs</h3>\n        <div className=\"nft-grid\">\n          {nfts && nfts.length > 0 ? (\n            nfts.map((nft) => (\n              <div key={nft.id} className=\"nft-item\">\n                <img src={nft.image_url} alt={nft.name} />\n                <p>{nft.name}</p>\n              </div>\n            ))\n          ) : (\n            <p className=\"no-nfts\">No NFTs found</p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default WalletCard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}